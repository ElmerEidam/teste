Curso de Git e GitHub

Antes de qualquer interação com o git, você precisa informar quem é você para que ele armazene corretamente os dados do autor de cada uma das alterações no código.

git config --local user.name "Seu nome aqui"
git config --local user.email "seu@email.aqui"


O comando "git init" inicializa um repositório no diretório em que o comando for executado.

"git status" para mostrar o estado do nosso repositório.

Para salvarmos uma alteração, ou um arquivo no repositório, precisaremos que o Git monitore o arquivo, e suas mudanças. Para tal, utilizaremos o comando "git add nomeDoArquivo". 
É possível utilizar o comando "git add ." para que todos os arquivos da pasta atual sejam monitorados.

Para remover o arquivo e para que o este deixe de ser monitorado usamos o comando "git rm".

Para salvar as alterações, utilizamos o comando "git commit -m", em que o parâmetro "-m" serve para passarmos uma mensagem de commit, que será incluído entre aspas.

Exemplo: git commit -m "Criando arquivo index.html com lista de cursos"


HEAD: Estado atual do nosso código, ou seja, onde o Git nos colocou

Working tree: Local onde os arquivos realmente estão sendo armazenados e editados

index: Local onde o Git armazena o que será commitado, ou seja, o local entre a working tree e o repositório Git em si.

Fundamentos de Git - Gravando Alterações em Seu Repositório
https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Gravando-Altera%C3%A7%C3%B5es-em-Seu-Reposit%C3%B3rio

"Hash do commit", uma identificação única de cada commit, isto é, não existem dois commits com o mesmo hash.

Para verificar o histórico de alterações, cada mensagem de commits feitos, o andamento do nosso projeto utilizamos o comando "git log".

Para visualizar todos os commits em uma única linha, utilizar o comando "git log --oneline".

Existe uma infinidade de formatos que podemos usar como filtros para mostrar nosso histórico, e em https://devhints.io/git-log há várias delas.

Comando que mostra apenas o HASH completo: git log --pretty="format:%H"
Comando que mostra o hash resumido seguido pela mensagem do commit: git log --pretty="format:%h %s"

E se ao invés de menos informações quisermos mais, como as alterações do commit, usaremos "git log -p".

Existe um arquivo especial do Git, chamado ".gitignore", e todas as linhas que estiverem nele serão lidos e ignorados pelo Git.
Se temos um arquivo que queremos que seja ignorado, por exemplo, basta o incluirmos no arquivo .gitignore.

Devemos gerar um commit sempre que a nossa base de código está em um estado do qual gostaríamos de nos lembrar. Nunca devemos ter commits de códigos que não funcionam, mas também não é interessante deixar para commitar apenas no final de uma feature.

Para criarmos um repositório do Git que somente armazenará as alterações, ou seja, não o acessaremos para editar arquivos, por exemplo, usaremos "git init --bare", cujo parâmetro indica que este repositório é puro, que contém apenas as alterações dos arquivos, e não uma cópia física de cada um dos arquivos. Com este comando nós criamos um repositório que não terá a working tree, ou seja, não conterá uma cópia dos nossos arquivos.

Exemplo:
Criamos a pasta do servidor local em: /home/elmer/Documents/git-e-github/Servidor/
Após acessarmos esta pasta, rodamos o comando "git init --bare"
Voltamos para o repositório onde fazemos as alterações: /home/elmer/Documents/git-e-github/Elmer/
Adicionamos o servidor como um repositório remoto com o nome 'local': git remote add local Documents/git-e-github/Servidor/

Para vermos qual o repositório remoto que estamos trabalhando utilizamos o comando: "git remote" e se quisermos garantir que o endereço esteja correto, poderemos executar "git remote -v", que faz com que o endereço de local seja exibido.

Os dados serão buscados (fetch) no caminho informado e enviados para este mesmo caminho (push).

local	Documents/git-e-github/Servidor/ (fetch)
local	Documents/git-e-github/Servidor/ (push)

Para clonarmos um repositório para outro lugar utilizamos o comando "git clone".
Como por exemplo, executando o seguinte comando dentro de outro diretório: git clone /home/elmer/Documents/git-e-github/Servidor

Para enviarmos os arquivos de um branch, neste caso 'main', para o repositório 'Servidor local', utilizamos o comando: "git push local main"

Para copiarmos estes arquivos, executamos "git pull nomeDoRepoRemoto" dentro do diretório que colaremos os arquivos.

Para trocarmos o nome do repositório remoto, executamos "git remote rename origin local", onde origin é o nome atual e local é o novo nome.